//overloading
class Adder
{  
  static int add(int a, int b){return a+b;}  
  static double add(double a, double b){return a+b;}  
}  
class TestOverloading2
{  
  public static void main(String[] args)
  {  
    System.out.println(Adder.add(11,11));  
    System.out.println(Adder.add(12.3,12.6));  
  }
}

//Overriding   
class Vehicle
{    
  void run(){System.out.println("Vehicle is running");}  
}    
class Bike2 extends Vehicle
{    
  void run(){System.out.println("Bike is running safely");}  
  
  public static void main(String args[])
  {  
    Bike2 obj = new Bike2();  
    obj.run();  
  }  
}  

//Interface declaration: by first user  
interface Drawable
{  
  void draw();  
}  
//Implementation: by second user  
class Rectangle implements Drawable
{  
  public void draw(){System.out.println("drawing rectangle");}  
}  
class Circle implements Drawable
{  
  public void draw(){System.out.println("drawing circle");}  
}  
//Using interface: by third user  
class TestInterface1
{  
  public static void main(String args[])
  {  
    Drawable d=new Circle();//In real scenario, object is provided by method e.g. getDrawable()  
    d.draw();  
  }
}  

interface Printable{  
void print();  
}  
interface Showable{  
void show();  
}  
class A7 implements Printable,Showable{  
public void print(){System.out.println("Hello");}  
public void show(){System.out.println("Welcome");}  
  
public static void main(String args[]){  
A7 obj = new A7();  
obj.print();  
obj.show();  
 }  
}  



//Java Program to demonstrate the use of Java Comparable.  
//Creating a class which implements Comparable Interface  
import java.util.*;  
import java.io.*;  
class Student implements Comparable<Student>{  
int rollno;  
String name;  
int age;  
Student(int rollno,String name,int age){  
this.rollno=rollno;  
this.name=name;  
this.age=age;  
}  
public int compareTo(Student st){  
if(age==st.age)  
return 0;  
else if(age>st.age)  
return 1;  
else  
return -1;  
}  
}  
//Creating a test class to sort the elements  
public class TestSort3{  
public static void main(String args[]){  
ArrayList<Student> al=new ArrayList<Student>();  
al.add(new Student(101,"Vijay",23));  
al.add(new Student(106,"Ajay",27));  
al.add(new Student(105,"Jai",21));  
  
Collections.sort(al);  
for(Student st:al){  
System.out.println(st.rollno+" "+st.name+" "+st.age);  
}  
}  
}  







Java Comparator Example
Let's see an example of the Java Comparator interface where we are sorting the elements of a list using different comparators.

Student.java
class Student{  
int rollno;  
String name;  
int age;  
Student(int rollno,String name,int age){  
this.rollno=rollno;  
this.name=name;  
this.age=age;  
}  
}  
AgeComparator.java
import java.util.*;  
class AgeComparator implements Comparator<Student>{  
public int compare(Student s1,Student s2){  
if(s1.age==s2.age)  
return 0;  
else if(s1.age>s2.age)  
return 1;  
else  
return -1;  
}  
}  
NameComparator.java
This class provides comparison logic based on the name. In such case, we are using the compareTo() method of String class, which internally provides the comparison logic.

import java.util.*;  
class NameComparator implements Comparator<Student>{  
public int compare(Student s1,Student s2){  
return s1.name.compareTo(s2.name);  
}  
}  
TestComparator.java
In this class, we are printing the values of the object by sorting on the basis of name and age.

//Java Program to demonstrate the use of Java Comparator  
import java.util.*;  
import java.io.*;  
class TestComparator{  
public static void main(String args[]){  
//Creating a list of students  
ArrayList<Student> al=new ArrayList<Student>();  
al.add(new Student(101,"Vijay",23));  
al.add(new Student(106,"Ajay",27));  
al.add(new Student(105,"Jai",21));  
  
System.out.println("Sorting by Name");  
//Using NameComparator to sort the elements  
Collections.sort(al,new NameComparator());  
//Traversing the elements of list  
for(Student st: al){  
System.out.println(st.rollno+" "+st.name+" "+st.age);  
}  
  
System.out.println("sorting by Age");  
//Using AgeComparator to sort the elements  
Collections.sort(al,new AgeComparator());  
//Travering the list again  
for(Student st: al){  
System.out.println(st.rollno+" "+st.name+" "+st.age);  
}  
  
}  
}  
Output:

Sorting by Name
106 Ajay 27
105 Jai 21
101 Vijay 23

Sorting by Age       
105 Jai 21
101 Vijay 23
106 Ajay 27
